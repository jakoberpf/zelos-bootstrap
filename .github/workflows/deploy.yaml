name: 'Deploy Blue and Green Environment'

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - add-semi-blue-green-deployments

permissions: write-all

jobs:
  terragrunt:
    name: 'Terragrunt'
    runs-on: ubuntu-latest
    concurrency: terragrunt
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v1

      - name: Setup SOPS with binary installer
        uses: mdgreenwald/mozilla-sops-action@v1.4.1

      - name: 'Install oci-cli'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::433082585283:role/github-oidc-terraform
          role-session-name: kubernetes-cluster-zelos-bootstrap
          aws-region: "eu-central-1" # ${{ env.AWS_REGION }}

      - name: 'Decrypt secrets'
        run: |
          ./bin/secrets-decrypt.sh
          ./bin/secrets-setup.sh
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      - name: 'Setup terragrunt'
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.tg_version }}

      - name: 'Setup terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}

      # - name: Get cached terraform generated ssh config
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-terraform-generated-ssh-config
      #   with:
      #     path: .ssh/config
      #     key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ env.cache-name }}

      # - name: Get cached terraform generated files
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-terraform-generated
      #   with:
      #     path: bin/generated
      #     key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ env.cache-name }}

      # - name: 'Get cached terraform generated ansible inventory'
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-terraform-ansible-inventory
      #   with:
      #     path: ansible/inventory.ini
      #     key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ env.cache-name }}

      # - name: 'Get cached terraform generated kubespray inventory'
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-terraform-kubespray-inventory
      #   with:
      #     path: kubespray/inventory.ini
      #     key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ env.cache-name }}

      - name: 'Terragrunt init'
        run: |
          ./bin/terraform-init.sh blue

      - name: 'Terragrunt validate'
        run: |
          ./bin/terraform-validate.sh blue

      - name: 'Terragrunt plan'
        run: |
         ./bin/terraform-plan.sh blue

      - name: 'Terragrunt apply (with force)'
        run: |
          ./bin/terraform-apply.sh blue --loop

      # - name: 'Terragrunt post'
      #   run: |
      #     ./bin/generated/peering.sh
      #   env:
      #     OCI_CLI_CONFIG_FILE: ${{ github.workspace }}/.oci/config

  # ansible:
  #   name: 'Ansible'
  #   runs-on: ubuntu-latest
  #   concurrency: ansible
  #   needs: 
  #     - tooling
  #     - terragrunt
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@v1

  #     - name: 'Install sops'
  #       run: |
  #         curl -O -L -C - https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux
  #         sudo mv sops-v3.7.3.linux /usr/bin/sops
  #         sudo chmod +x /usr/bin/sops

  #     - name: 'Install age'
  #       run: |
  #         curl -O -L -C - https://github.com/FiloSottile/age/releases/download/v1.0.0/age-v1.0.0-linux-amd64.tar.gz
  #         tar -zxvf age-v1.0.0-linux-amd64.tar.gz
  #         sudo mv age/age /usr/bin/age
  #         sudo chmod +x /usr/bin/age

  #     - name: 'Install oci-cli'
  #       run: |
  #         curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
  #         chmod +x install.sh
  #         ./install.sh --accept-all-defaults
  #         echo "::add-path::/home/runner/bin"
  #         exec -l $SHELL
  #       env:
  #         ACTIONS_ALLOW_UNSECURE_COMMANDS: true

  #     - name: Get cached .venv
  #       uses: actions/cache@v3
  #       env:
  #         cache-name: cache-tooling-venv
  #       with:
  #         path: .venv
  #         key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
  #         restore-keys: |
  #           ${{ runner.os }}-${{ env.cache-name }}

  #     - name: 'Get cached terraform generated ansible inventory'
  #       uses: actions/cache@v3
  #       env:
  #         cache-name: cache-terraform-ansible-inventory
  #       with:
  #         path: ansible/inventory.ini
  #         key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
  #         restore-keys: |
  #           ${{ runner.os }}-${{ env.cache-name }}

  #     - name: 'Decrypt secrets'
  #       run: |
  #         ./bin/secrets-decrypt.sh
  #         ./bin/secrets-setup.sh
  #       env:
  #         SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

  #     - name: 'Ansible deploy'
  #       run: |
  #         cat ansible/inventory.ini
  #         ./bin/ansible-playbook.sh

  # kubespray:
  #   name: 'Kubespray'
  #   runs-on: ubuntu-latest
  #   concurrency: kubespray
  #   needs: 
  #     - tooling
  #     - ansible
  #     - terragrunt
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@v1

  #     - name: Get cached .venv
  #       uses: actions/cache@v3
  #       env:
  #         cache-name: cache-tooling-venv
  #       with:
  #         path: .venv
  #         key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
  #         restore-keys: |
  #           ${{ runner.os }}-${{ env.cache-name }}

  #     - name: 'Get cached terraform generated kubespray inventory'
  #       uses: actions/cache@v3
  #       env:
  #         cache-name: cache-terraform-kubespray-inventory
  #       with:
  #         path: kubespray/inventory.ini
  #         key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
  #         restore-keys: |
  #           ${{ runner.os }}-${{ env.cache-name }}

  #     - name: 'Install sops'
  #       run: |
  #         curl -O -L -C - https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux
  #         sudo mv sops-v3.7.3.linux /usr/bin/sops
  #         sudo chmod +x /usr/bin/sops

  #     - name: 'Install age'
  #       run: |
  #         curl -O -L -C - https://github.com/FiloSottile/age/releases/download/v1.0.0/age-v1.0.0-linux-amd64.tar.gz
  #         tar -zxvf age-v1.0.0-linux-amd64.tar.gz
  #         sudo mv age/age /usr/bin/age
  #         sudo chmod +x /usr/bin/age

  #     - name: 'Install oci-cli'
  #       run: |
  #         curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
  #         chmod +x install.sh
  #         ./install.sh --accept-all-defaults
  #         echo "::add-path::/home/runner/bin"
  #         exec -l $SHELL
  #       env:
  #         ACTIONS_ALLOW_UNSECURE_COMMANDS: true

  #     - name: 'Decrypt secrets'
  #       run: |
  #         ./bin/secrets-decrypt.sh
  #         ./bin/secrets-setup.sh
  #       env:
  #         SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

  #     - name: 'Kubespray deploy'
  #       run: |
  #         make kubespray.clone
  #         cat kubespray/inventory.ini
  #         ./bin/kubespray-deploy.sh

  #     - name: 'Kubespray post'
  #       run: |
  #         ./bin/kubespray-post.sh
  #       env:
  #         OCI_CLI_CONFIG_FILE: ${{ github.workspace }}/.oci/config

# TODO trigger zelos-installer action: https://blog.marcnuri.com/triggering-github-actions-across-different-repositories
