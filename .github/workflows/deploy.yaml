name: 'Deploy'

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  tf_version: '1.1.8'
  tg_version: '0.36.3'
  tf_working_dir: './terraform'

jobs:
  tooling:
    name: 'Tooling'
    runs-on: ubuntu-latest
    concurrency: tooling
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v1

      - name: 'Setup tooling'
        run: |
          ./bin/tooling.sh

      - name: Cache .venv
        uses: actions/cache@v3
        env:
          cache-name: cache-tooling-venv
        with:
          path: .venv
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}

  terragrunt:
    name: 'Terragrunt'
    runs-on: ubuntu-latest
    concurrency: terragrunt
    needs: 
      - tooling
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v1

      - name: Get cached .venv
        uses: actions/cache@v3
        env:
          cache-name: cache-tooling-venv
        with:
          path: .venv
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}

      - name: 'Install sops'
        run: |
          curl -O -L -C - https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux
          sudo mv sops-v3.7.3.linux /usr/bin/sops
          sudo chmod +x /usr/bin/sops

      - name: 'Install age'
        run: |
          curl -O -L -C - https://github.com/FiloSottile/age/releases/download/v1.0.0/age-v1.0.0-linux-amd64.tar.gz
          tar -zxvf age-v1.0.0-linux-amd64.tar.gz
          sudo mv age/age /usr/bin/age
          sudo chmod +x /usr/bin/age

      - name: 'Install oci-cli'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: 'Decrypt secrets'
        run: |
          ./bin/secrets-decrypt.sh
          ./bin/secrets-setup.sh
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      - name: 'Setup terragrunt'
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.tg_version }}

      - name: 'Setup terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}

      - name: Get cached terraform generated ssh config
        uses: actions/cache@v3
        env:
          cache-name: cache-terraform-generated-ssh-config
        with:
          path: .ssh/config
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}

      - name: Get cached terraform generated files
        uses: actions/cache@v3
        env:
          cache-name: cache-terraform-generated
        with:
          path: bin/generated
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}

      - name: 'Get cached terraform generated kubespray inventory'
        uses: actions/cache@v3
        env:
          cache-name: cache-terraform-kubespray-inventory
        with:
          path: kubespray/inventory.ini
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}

      - name: 'Terragrunt init'
        run: |
          ./bin/terraform-init.sh
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 'Terragrunt validate'
        run: |
          ./bin/terraform-validate.sh
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 'Terragrunt plan'
        run: |
         ./bin/terraform-plan.sh
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 'Terragrunt apply (with force)'
        run: |
          ./bin/terraform-apply.sh --loop
          cat kubespray/inventory.ini
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 'Terragrunt post'
        run: |
          ./bin/generated/peering.sh
        env:
          OCI_CLI_CONFIG_FILE: ${{ github.workspace }}/.oci/config

      - name: Cache terraform generated ssh config
        uses: actions/cache@v3
        env:
          cache-name: cache-terraform-generated-ssh-config
        with:
          path: .ssh/config
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}

      - name: Cache terraform generated files
        uses: actions/cache@v3
        env:
          cache-name: cache-terraform-generated
        with:
          path: bin/generated
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}

      - name: Cache terraform generated kubespray inventory
        uses: actions/cache@v3
        env:
          cache-name: cache-terraform-kubespray-inventory
        with:
          path: kubespray/inventory.ini
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}

  kubespray:
    name: 'Kubespray'
    runs-on: ubuntu-latest
    concurrency: kubespray
    needs: 
      - tooling
      - terragrunt
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v1

      - name: Get cached .venv
        uses: actions/cache@v3
        env:
          cache-name: cache-tooling-venv
        with:
          path: .venv
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}

      - name: 'Get cached terraform generated kubespray inventory'
        uses: actions/cache@v3
        env:
          cache-name: cache-terraform-kubespray-inventory
        with:
          path: kubespray/inventory.ini
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}

      - name: 'Install sops'
        run: |
          curl -O -L -C - https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux
          sudo mv sops-v3.7.3.linux /usr/bin/sops
          sudo chmod +x /usr/bin/sops

      - name: 'Install age'
        run: |
          curl -O -L -C - https://github.com/FiloSottile/age/releases/download/v1.0.0/age-v1.0.0-linux-amd64.tar.gz
          tar -zxvf age-v1.0.0-linux-amd64.tar.gz
          sudo mv age/age /usr/bin/age
          sudo chmod +x /usr/bin/age

      - name: 'Install oci-cli'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: 'Decrypt secrets'
        run: |
          ./bin/secrets-decrypt.sh
          ./bin/secrets-setup.sh
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      - name: 'Kubespray deploy'
        run: |
          make kubespray.clone
          cat kubespray/inventory.ini
          ./bin/kubespray-deploy.sh
        env:
          ANSIBLE_TIMEOUT: 120

      - name: 'Kubespray post'
        run: |
         ./bin/kubespray-post.sh

# TODO trigger zelos-installer action: https://blog.marcnuri.com/triggering-github-actions-across-different-repositories
